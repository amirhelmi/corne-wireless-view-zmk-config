/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM 2
#define NUMGUI 3
#define FUN 4

#define COMBO(NAME,TIMEOUT, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    require-prior-idle-ms = <125>; \
  };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE>; };

/ {
    ZMK_MACRO(info,

    bindings = <&kp I  &kp N &kp F &kp O &kp LS(N9)  &kp SQT &kp FSLH &kp FSLH &kp SQT &kp LS(N0) &kp LEFT>;

    )
ZMK_MACRO(

    value,
    bindings = <
&kp LS(V)  &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LS(N9)  
&kp O &kp B &kp J &kp E &kp C &kp T &kp LS(N0) &kp LEFT
    >;

    )
ZMK_MACRO(

    semiequal,
    bindings = <&kp LS(SEMI) &kp EQUAL>;

    )
ZMK_MACRO(

    statement,
    bindings = <&kp RET &kp LS(LBKT) &kp RET &kp RET &kp LS(RBKT) &kp UP &kp TAB >;

    )
ZMK_MACRO(

    versioncontrol,
    bindings = <&kp LA(N1)  &kp LC( LS(TAB)) &kp LA(T)>;

    )
ZMK_MACRO(

    staticcall,
    bindings = <&kp LS(SEMI) &kp LS(SEMI) >;

    )
ZMK_MACRO(

    comment,
    bindings = < &kp FSLH &kp LS(N8) >;

    )
ZMK_MACRO(

    usage,
    bindings = <&kp LC(E) &kp LA(N1) &kp LC(U) >;

    )
ZMK_MACRO(

    sup,
    bindings = <
&kp LS(S) &kp Y &kp N &kp C &kp H &kp R &kp O &kp N &kp I &kp Z &kp E 
&kp U &kp P &kp G &kp R &kp A &kp D &kp E &kp A &kp B &kp I &kp L &kp I &kp T &kp Y &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(EQUAL)
    >;

    )
ZMK_MACRO(

    traverse,
    bindings = < &kp T &kp R &kp A &kp V &kp E &kp R &kp S &kp E &kp LS(N9) &kp SPACE &kp LS(N0) &kp LEFT>;

    )
ZMK_MACRO(

    astype,
    bindings = < &kp A &kp S &kp T &kp Y &kp P &kp E &kp LS(N9) >;

    )
ZMK_MACRO(

    select,
    bindings = <&kp S &kp E &kp L &kp E &kp C &kp T  &kp LS(N9) &kp SPACE &kp LS(N0) &kp SEMI &kp LEFT &kp LEFT>;

    )
ZMK_MACRO(

    amirhelmi,
    bindings = <&kp A &kp M &kp I &kp R &kp H &kp E &kp L &kp M &kp I &kp DOT &kp A &kp B &kp D &kp H &kp A &kp M &kp I &kp D>;

    )
ZMK_MACRO(

    parenthesissemi,
    bindings = < &kp LS(N0) &kp SEMI>;

    )
ZMK_MACRO(

    num_gui,
    bindings =
        <&macro_press &mo NUMGUI &kp LGUI>,
        <&macro_pause_for_release>,
        <&macro_release &mo NUMGUI &kp LGUI>;

    )
ZMK_MACRO(

    selectword,
    bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;

    )      
ZMK_MACRO(

    shift_nav,
    bindings =
        <&macro_press &mo NAV  &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LSHFT>;

    )
ZMK_MACRO(

    shift_ctrl_nav,
    bindings =
        <&macro_press &mo NAV &kp LCTRL &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LCTRL &kp LSHFT>;

    )  
ZMK_MACRO(

    ctrl_nav,
    bindings =
        <&macro_press &mo NAV &kp LCTRL>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LCTRL>;

    )
ZMK_MACRO(

    shift_num,
    bindings =
        <&macro_press &mo NUM  &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NUM  &kp LSHFT>;

    ) 
ZMK_MACRO(

    mo_fun,
    bindings =
        <&macro_press &mo FUN >,
        <&macro_pause_for_release>,
        <&macro_release &mo FUN>;

    )

    behaviors {
        hold_shift: hold_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&shift_nav>, <&kp>;
        };
    };

    behaviors {
        hold_ctrl: hold_ctrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&ctrl_nav>, <&kp>;
        };
    };

    behaviors {
        hold_ctrl_shift: hold_ctrl_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&shift_ctrl_nav>, <&kp>;
        };
    };

    behaviors {
        repeat_fun: repeat_fun {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo_fun>, <&key_repeat>;
        };
    };

    behaviors {
        phl: phl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    behaviors {
        phr: phr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    behaviors {
        gui_tap: gui_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&num_gui>, <&kp>;
        };
    };

    behaviors {
        noidlethumb: noidlethumb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rparenth {
            bindings = <&mt RIGHT_BRACKET RIGHT_PARENTHESIS>;
            key-positions = <40 21>;
        };

        taba {
            bindings = <&kp TAB>;
            key-positions = <40 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <37 13>;
        };

        lparenth {
            bindings = <&mt LEFT_BRACKET LEFT_PARENTHESIS>;
            key-positions = <37 14>;
        };

        ctrlback {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <40 22>;
        };

        lboot {
            bindings = <&bootloader>;
            key-positions = <14 16 37>;
        };

        rboot {
            bindings = <&bootloader>;
            key-positions = <40 19 21>;
        };

        ctrlcopy {
            bindings = <&mt LC(X) LC(C)>;
            key-positions = <14 15>;
        };

        shiftpaste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
        };

        dele {
            bindings = <&kp DEL>;
            key-positions = <28 26>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 40>;
        };

        stickshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <37 16>;
        };

        click {
            bindings = <&mkp LCLK>;
            key-positions = <39 40>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <40 20 21>;
        };

        rightclick {
            bindings = <&mkp RCLK>;
            key-positions = <40 41>;
        };

        resetble {
            bindings = <&bt BT_CLR>;
            key-positions = <40 18 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <31 32>;
        };

        stickyctrl {
            bindings = <&sk LEFT_CONTROL>;
            key-positions = <37 15>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <4 16>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        infocombo {
            bindings = <&info>;
            key-positions = <9 21>;
        };

        valuecombo {
            bindings = <&value>;
            key-positions = <2 14>;
        };

        statementcombo {
            bindings = <&statement>;
            key-positions = <40 9>;
        };
    };

    macros {
        info: info {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp F &kp O &kp LPAR &kp SQT &kp FSLH &kp FSLH &kp SQT &kp RPAR &kp LEFT>;
            label = "INFO";
        };

        statement: statement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RET &kp LEFT_BRACE &kp RET &kp RBRC &kp UP_ARROW &kp ENTER>;
            label = "STATEMENT";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(V) &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LPAR &kp O &kp B &kp J &kp E &kp C &kp T>;
            label = "VALUE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "alphabet";
            bindings = <
&none  &mt LG(LS(S)) W  &kp L           &kp Y                     &kp P             &mt LA(HOME) B    &kp Z            &mt INSERT F                   &kp O          &kp U      &mt GRAVE SQT  &none
&none  &kp C            &kp R           &lt NAV S                 &lt NUM T         &kp G             &kp M            &kp N                          &kp E          &kp I      &kp A          &none
&none  &mt LSHIFT Q     &mt LC(FSLH) J  &mt LGUI V                &kp D             &kp K             &kp X            &kp H                          &mt BSLH FSLH  &kp COMMA  &kp DOT        &none
                                        &mt K_CONTEXT_MENU ENTER  &gui_tap 0 SPACE  &lt FUN TAB       &repeat_fun 0 0  &noidlethumb LSHIFT BACKSPACE  &mt LALT RET
            >;
        };

        nav_layer {
            display-name = "navigation";
            bindings = <
&none  &kp CAPSLOCK  &trans     &trans  &kp LC(Z)         &kp LC(Y)    &trans    &trans     &kp UP    &trans     &trans   &none
&none  &trans        &kp LCTRL  &trans  &mt LSHIFT LC(S)  &kp LC(R)    &kp HOME  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END  &none
&none  &trans        &trans     &trans  &kp LC(A)         &trans       &trans    &kp PG_UP  &none     &kp PG_DN  &trans   &none
                                &trans  &sk LEFT_ALT      &trans       &trans    &trans     &trans
            >;
        };

        num_layer {
            display-name = "number";
            bindings = <
&none  &none  &none  &none   &none                 &none     &kp GRAVE   &kp N7  &kp N8  &kp N9  &mt FSLH MINUS  &none
&none  &none  &none  &none   &none                 &none     &kp PERIOD  &kp N4  &kp N5  &kp N6  &kp N0          &none
&none  &none  &none  &none   &none                 &none     &kp BSLH    &kp N1  &kp N2  &kp N3  &kp DOT         &none
                     &trans  &mt LEFT_SHIFT SPACE  &trans    &trans      &trans  &trans
            >;
        };

        numgui_layer {
            display-name = "appswitcher";
            bindings = <
&none  &trans         &kp N7  &kp N8  &kp N9         &kp N0    &none  &none  &none  &none  &none  &none
&none  &mt LSHIFT N0  &kp N4  &kp N5  &mt LSHIFT N6  &trans    &none  &none  &none  &none  &none  &none
&none  &trans         &kp N1  &kp N2  &kp N3         &trans    &none  &none  &none  &none  &none  &none
                              &trans  &trans         &trans    &none  &none  &none
            >;
        };

        fun_layer {
            display-name = "function";
            bindings = <
&none  &none            &none      &kp LA(UP)    &none      &none         &kp F12  &kp F7  &kp F8  &kp F9  &none  &none
&none  &kp LC(LA(TAB))  &kp LC(R)  &kp LA(DOWN)  &kp LC(E)  &kp LC(T)     &kp F11  &kp F4  &kp F5  &kp F6  &none  &none
&none  &kp LC(Q)        &kp LC(J)  &kp LC(U)     &kp LC(D)  &kp LC(F4)    &kp F10  &kp F1  &kp F2  &kp F3  &none  &none
                                   &trans        &trans     &trans        &trans   &trans  &trans
            >;
        };
    };
};
