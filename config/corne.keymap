/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include "mouse.dtsi"
#include "corne.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM 2
#define NUMGUI 3
#define FUN 4
#define MOUSE 5

#define COMBO(NAME,TIMEOUT, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    require-prior-idle-ms = <125>; \
  };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE>; };

/ {
    ZMK_MACRO(info,

    bindings = <&kp I  &kp N &kp F &kp O &kp LS(N9)  &kp SQT &kp FSLH &kp FSLH &kp SQT &kp LS(N0) &kp LEFT>;

    )
ZMK_MACRO(

    value,
    bindings = <
&kp LS(V)  &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LS(N9)  
&kp O &kp B &kp J &kp E &kp C &kp T &kp LS(N0) &kp LEFT
    >;

    )
ZMK_MACRO(

    semiequal,
    bindings = <&kp LS(SEMI) &kp EQUAL>;

    )
ZMK_MACRO(

    statement,
    bindings = <&kp RET &kp LS(LBKT) &kp RET &kp RET &kp LS(RBKT) &kp UP &kp TAB >;

    )
ZMK_MACRO(

    versioncontrol,
    bindings = <&kp LA(N1)  &kp LC( LS(TAB)) &kp LA(T)>;

    )
ZMK_MACRO(

    staticcall,
    bindings = <&kp LS(SEMI) &kp LS(SEMI) >;

    )
ZMK_MACRO(

    comment,
    bindings = < &kp FSLH &kp LS(N8) >;

    )
ZMK_MACRO(

    usage,
    bindings = <&kp LC(E) &kp LA(N1) &kp LC(U) >;

    )
ZMK_MACRO(

    sup,
    bindings = <
&kp LS(S) &kp Y &kp N &kp C &kp H &kp R &kp O &kp N &kp I &kp Z &kp E 
&kp U &kp P &kp G &kp R &kp A &kp D &kp E &kp A &kp B &kp I &kp L &kp I &kp T &kp Y &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(EQUAL) &kp RE
    >;

    )
ZMK_MACRO(

    traverse,
    bindings = < &kp T &kp R &kp A &kp V &kp E &kp R &kp S &kp E &kp LS(N9) &kp SPACE &kp LS(N0) &kp LEFT>;

    )
ZMK_MACRO(

    astype,
    bindings = < &kp A &kp S &kp T &kp Y &kp P &kp E &kp LS(N9) >;

    )
ZMK_MACRO(

    select,
    bindings = <&kp S &kp E &kp L &kp E &kp C &kp T  &kp LS(N9) &kp SPACE &kp LS(N0) &kp SEMI &kp LEFT &kp LEFT>;

    )
ZMK_MACRO(

    amirhelmi,
    bindings = <&kp A &kp M &kp I &kp R &kp H &kp E &kp L &kp M &kp I &kp DOT &kp A &kp B &kp D &kp H &kp A &kp M &kp I &kp D>;

    )
ZMK_MACRO(

    parenthesissemi,
    bindings = < &kp LS(N0) &kp SEMI>;

    )
ZMK_MACRO(

    num_gui,
    bindings =
        <&macro_press &mo NUMGUI &kp LGUI>,
        <&macro_pause_for_release>,
        <&macro_release &mo NUMGUI &kp LGUI>;

    )
ZMK_MACRO(

    selectword,
    bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;

    )      
ZMK_MACRO(

    shift_nav,
    bindings =
        <&macro_press &mo NAV  &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LSHFT>;

    )
ZMK_MACRO(

    shift_ctrl_nav,
    bindings =
        <&macro_press &mo NAV &kp LCTRL &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LCTRL &kp LSHFT>;

    )  
ZMK_MACRO(

    ctrl_nav,
    bindings =
        <&macro_press &mo NAV &kp LCTRL>,
        <&macro_pause_for_release>,
        <&macro_release &mo NAV &kp LCTRL>;

    )
ZMK_MACRO(

    shift_num,
    bindings =
        <&macro_press &mo NUM  &kp LSHFT>,
        <&macro_pause_for_release>,
        <&macro_release &mo NUM  &kp LSHFT>;

    ) 
ZMK_MACRO(

    mo_fun,
    bindings =
        <&macro_press &mo FUN >,
        <&macro_pause_for_release>,
        <&macro_release &mo FUN>;

    )

    behaviors {
        hold_shift: hold_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&shift_nav>, <&kp>;
        };
    };

    behaviors {
        hold_ctrl: hold_ctrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&ctrl_nav>, <&kp>;
        };
    };

    behaviors {
        hold_ctrl_shift: hold_ctrl_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            bindings = <&shift_ctrl_nav>, <&kp>;
        };
    };

    behaviors {
        repeat_fun: repeat_fun {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo_fun>, <&key_repeat>;
        };
    };

    behaviors {
        phl: phl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    behaviors {
        phr: phr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    behaviors {
        gui_tap: gui_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&num_gui>, <&kp>;
        };
    };

    behaviors {
        noidlethumb: noidlethumb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO(assign, 50, &semiequal, 13 14 17 18)
               

                COMBO(equal, 50, &kp EQUAL, 4 14)
                COMBO(del, 50, &kp DEL, 22 24)   
                COMBO(hold_ctrl_copy, 50, &hold_ctrl 0  LC(C), 12 13 )
                COMBO(hold_shift_paste, 50,&hold_shift 0  LC(V), 13 14 )
                COMBO(winclose, 50,&kp LA(SPACE), 22 23 )
                COMBO(versionctrl, 50, &versioncontrol, 2 3 )
                COMBO(parenthesisL, 50, &mt LBKT LS(N9),  12 34 )
                COMBO(excelright, 50, &kp LC(PG_DN), 13 24)
                COMBO(excelleft, 50, &kp  LC(PG_UP), 22 13)
                COMBO(value, 50, &value, 2 12)
                COMBO( shiftnum, 100, &shift_num, 14 34 )
                COMBO( shifttab, 50, &kp LS(TAB), 34 35)
                COMBO( hold_ctrl_selectall, 50, &hold_ctrl_shift 0 LC(A), 12 13 14 )
                COMBO( editor, 70, &kp LA(N1), 13 34)
                COMBO( shift, 70, &sk LSHIFT, 14 34)
                COMBO( escape, 70, &kp ESC, 11 34)
                COMBO( butl, 50, &bootloader , 11 12 13 14 34 )

                COMBO(seruan, 50, &mt LS(N7)  LS(N1), 6 16)
                COMBO(underscore, 50, &kp LS(MINUS), 27 29)
                COMBO(semi, 50, &kp  SEMI, 18 19 37)
                COMBO(colon, 50, &kp LS(SEMI), 17 37)
                COMBO(dot, 50, &kp DOT, 27 28)
                COMBO(minus, 50, &kp MINUS, 28 29)
                COMBO(parenthesisR, 80, &mt RBKT LS(N0), 19 37 )
                COMBO(statement, 50, &statement, 37 9)
                COMBO(comment, 50, &comment, 27 210)
                COMBO( sup, 50, &sup, 27 28 29)
                COMBO( info, 50, &info, 9 19 )
                COMBO( ctrlback, 50, &kp LC(BACKSPACE), 110 37)
                COMBO( tabanother, 50, &kp TAB, 18 37)
                COMBO( menu, 50, &kp K_CONTEXT_MENU, 17 18 37 )
                COMBO( mouseclick, 100, &mkp LCLK, 36 37)
                COMBO( dele, 100, &kp DELETE, 17 36 )
                COMBO( plus, 100, &kp LS(EQUAL), 7 17 )
               COMBO( butr, 50, &bootloader , 17 18 19 37 )

        rparten {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <40 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&mt LG(LS(S)) W  &kp L      &kp Y  &kp P          &mt LA(HOME) B  &kp Z      &mt INSERT F   &kp O             &kp U         &mt GRAVE SQT    &kp C                          &phl LCTRL R
&lt NAV S        &lt NUM T  &kp G  &kp M          &kp N           &kp E      &phr LCTRL I   &kp A             &mt LSHIFT Q  &mt LC(FSLH) J   &mt LGUI V                     &kp D
&kp K            &kp X      &kp H  &mt BSLH FSLH  &kp COMMA       &kp DOT    &lt MOUSE RET  &gui_tap 0 SPACE  &lt FUN TAB   &repeat_fun 0 0  &noidlethumb LSHIFT BACKSPACE  &mt LALT RET
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans            &trans     &kp LC(Z)  &kp LC(Y)  &trans      &trans     &kp UP       &trans  &trans  &trans  &kp LCTRL
&trans  &mt LSHIFT LC(S)  &kp LC(R)  &kp HOME   &kp LEFT   &kp DOWN    &kp RIGHT  &kp END      &trans  &trans  &trans  &kp LC(A)
&trans  &trans            &kp PG_UP  &none      &kp PG_DN  &trans      &trans     &kp LA(TAB)  &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&none  &none     &none   &none       &none   &kp GRAVE               &kp N7  &kp N8  &kp N9  &mt FSLH MINUS  &none   &none
&none  &none     &none   &kp PERIOD  &kp N4  &kp N5                  &kp N6  &kp N0  &none   &none           &none   &none
&none  &kp BSLH  &kp N1  &kp N2      &kp N3  &mt LS(N8) LS(EQUAL)    &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        numgui_layer {
            bindings = <
&trans  &kp N7         &kp N8  &kp N9  &kp N0  &none    &none   &none   &none   &none   &mt LSHIFT N0  &kp N4
&kp N5  &mt LSHIFT N6  &trans  &none   &none   &none    &none   &none   &trans  &kp N1  &kp N2         &kp N3
&trans  &none          &none   &none   &none   &none    &trans  &trans  &trans  &none   &none          &none
            >;
        };

        fun_layer {
            bindings = <
&none         &none      &kp LA(UP)  &none    &none   &kp F12    &kp F7  &kp F8  &kp F9     &none      &kp LC(LA(TAB))  &kp LC(R)
&kp LA(DOWN)  &kp LC(E)  &kp LC(T)   &kp F11  &kp F4  &kp F5     &kp F6  &none   &kp LC(Q)  &kp LC(J)  &kp LC(U)        &kp LC(D)
&kp LC(F4)    &kp F10    &kp F1      &kp F2   &kp F3  &none      &trans  &trans  &trans     &trans     &trans           &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans            &trans          &msc SCROLL_UP    &trans           &mmv MOVE_UP  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &msc SCROLL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans            &trans          &trans            &trans           &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
