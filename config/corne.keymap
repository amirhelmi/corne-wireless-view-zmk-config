/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM 2
#define NUMGUI 3
#define FUN 4
#define MOUSE 5

#define COMBO(NAME,TIMEOUT, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    require-prior-idle-ms = <125>; \
  };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE>; };

/ {
    ZMK_MACRO(

    num_gui,

    bindings =
        <&macro_press &mo NUMGUI &kp LGUI>,
        <&macro_pause_for_release>,
        <&macro_release &mo NUMGUI &kp LGUI>;

    )

   ZMK_MACRO(

    mo_fun,
    bindings =
        <&macro_press &mo FUN >,
        <&macro_pause_for_release>,
        <&macro_release &mo FUN>;

    )

    behaviors {
        repeat_fun: repeat_fun {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo_fun>, <&key_repeat>;
        };
    };

    behaviors {
        gui_tap: gui_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&num_gui>, <&kp>;
        };
    };

    behaviors {
        noidlethumb: noidlethumb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rparenth {
            bindings = <&mt RIGHT_BRACKET RIGHT_PARENTHESIS>;
            key-positions = <40 21>;
        };

        taba {
            bindings = <&kp TAB>;
            key-positions = <40 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <37 25>;
        };

        lparenth {
            bindings = <&mt LEFT_BRACKET LEFT_PARENTHESIS>;
            key-positions = <37 14>;
        };

        ctrlback {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <40 34>;
        };

        lboot {
            bindings = <&bootloader>;
            key-positions = <13 17 38>;
        };

        rboot {
            bindings = <&bootloader>;
            key-positions = <18 39 22>;
        };

        cutcopy {
            bindings = <&mt LC(X) LC(C)>;
            key-positions = <14 15>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
        };

        dele {
            bindings = <&kp DEL>;
            key-positions = <28 26>;
        };

        menuenter {
            bindings = <&mt K_CONTEXT_MENU ENTER>;
            key-positions = <37 16>;
        };

        click {
            bindings = <&mkp LCLK>;
            key-positions = <39 40>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <40 19>;
        };

        rightclick {
            bindings = <&mkp RCLK>;
            key-positions = <40 41>;
        };

        resetble {
            bindings = <&bt BT_CLR>;
            key-positions = <40 18 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
        };

        stickyctrl {
            bindings = <&sk LEFT_CONTROL>;
            key-positions = <37 15>;
        };

        colonn {
            bindings = <&kp COLON>;
            key-positions = <4 16>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <7 19>;
        };

        infocombo {
            bindings = <&info>;
            key-positions = <9 21>;
        };

        valuecombo {
            bindings = <&value>;
            key-positions = <2 14>;
        };

        statementcombo {
            bindings = <&statement>;
            key-positions = <40 9>;
        };

        shifttab {
            bindings = <&kp LS(TAB)>;
            key-positions = <37 38>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <37 40>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <4 37>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <27 28>;
        };
    };

    macros {
        info: info {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp F &kp O &kp LPAR &kp SQT &kp FSLH &kp FSLH &kp SQT &kp RPAR &kp LEFT>;
            label = "INFO";
        };

        statement: statement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RET &kp LEFT_BRACE &kp RET &kp RBRC &kp UP_ARROW &kp ENTER &kp TAB>;
            label = "STATEMENT";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(V) &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LPAR &kp O &kp B &kp J &kp E &kp C &kp T>;
            label = "VALUE";
        };

        versionctrl: versionctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(NUMBER_1) &kp LC(TAB) &kp LA(T)>;
            label = "VERSIONCTRL";
        };

        slogan: slogan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp Y &kp N &kp C &kp H &kp R &kp O &kp N &kp I &kp Z &kp E &kp U &kp P &kp G &kp R &kp A &kp D &kp E &kp A &kp B &kp I &kp L &kp I &kp T &kp Y &kp DLLR &kp PRCNT &kp CARET &kp PLUS>;
            label = "SLOGAN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "alphabet";
            bindings = <
&none  &mt LG(LS(S)) LA(NUMBER_1)  &kp L           &kp Y       &kp P             &mt LA(HOME) B        &kp Z        &mt INSERT F              &kp O           &kp U    &mt BACKSLASH SLASH  &none
&none  &kp W                       &lt MOUSE R     &lt NAV S   &lt NUM T         &kp G                 &kp M        &kp N                     &kp E           &kp I    &mt GRAVE APOS       &none
&none  &kp C                       &mt LC(FSLH) J  &mt LGUI V  &kp D             &kp K                 &kp X        &kp H                     &kp COMMA       &kp DOT  &kp A                &none
                                                   &sl 4       &gui_tap 0 SPACE  &mt LEFT_SHIFT TAB    &key_repeat  &mt LEFT_SHIFT BACKSPACE  &mt LALT ENTER
            >;
        };

        nav_layer {
            display-name = "navigation";
            bindings = <
&none  &kp CAPSLOCK  &trans     &trans  &kp LC(Z)         &kp LC(Y)    &trans    &trans     &kp UP    &trans     &trans   &none
&none  &trans        &kp LCTRL  &trans  &mt LSHIFT LC(S)  &kp LC(R)    &kp HOME  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END  &none
&none  &trans        &trans     &trans  &kp LC(A)         &trans       &trans    &kp PG_UP  &none     &kp PG_DN  &trans   &none
                                &trans  &sk LEFT_ALT      &trans       &trans    &trans     &trans
            >;
        };

        num_layer {
            display-name = "number";
            bindings = <
&none  &none  &none  &none   &none                 &none     &kp GRAVE   &kp N7  &kp N8  &kp N9  &mt FSLH MINUS  &none
&none  &none  &none  &none   &none                 &none     &kp PERIOD  &kp N4  &kp N5  &kp N6  &kp N0          &none
&none  &none  &none  &none   &none                 &none     &kp BSLH    &kp N1  &kp N2  &kp N3  &kp DOT         &none
                     &trans  &mt LEFT_SHIFT SPACE  &trans    &trans      &trans  &trans
            >;
        };

        numgui_layer {
            display-name = "appswitcher";
            bindings = <
&none  &trans         &kp N7  &kp N8  &kp N9         &kp N0    &none  &none  &none  &none  &none  &none
&none  &mt LSHIFT N0  &kp N4  &kp N5  &mt LSHIFT N6  &trans    &none  &none  &none  &none  &none  &none
&none  &trans         &kp N1  &kp N2  &kp N3         &trans    &none  &none  &none  &none  &none  &none
                              &trans  &trans         &trans    &none  &none  &none
            >;
        };

        fun_layer {
            display-name = "function";
            bindings = <
&none  &none      &versionctrl  &kp LA(UP)  &kp LA(DOWN)       &slogan       &kp F12  &kp F7  &kp F8  &kp F9  &bt BT_SEL 0  &none
&none  &kp LA(D)  &kp LC(R)     &kp LC(D)   &kp LC(E)          &kp LC(T)     &kp F11  &kp F4  &kp F5  &kp F6  &bt BT_SEL 1  &none
&none  &kp LC(Q)  &kp LC(J)     &kp LC(U)   &ext_power EP_TOG  &kp LC(F4)    &kp F10  &kp F1  &kp F2  &kp F3  &none         &none
                                &trans      &trans             &trans        &trans   &trans  &trans
            >;
        };

        mouse_layer {
            display-name = "mouse";
            bindings = <
&none  &none  &none  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP    &none     &msc SCROLL_UP    &trans          &mmv MOVE_UP    &trans           &trans  &trans
&none  &none  &none  &kp C_BRI_DEC         &kp C_VOLUME_DOWN  &none     &msc SCROLL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&none  &none  &none  &none                 &none              &none     &none             &none           &none           &none            &none   &none
                     &trans                &trans             &trans    &trans            &trans          &trans
            >;
        };
    };
};
